0x00 - m_dwHeader  - 0xFA813ED0
0x04 - m_iVersion  - 0x00000007
0x08 - dwSaveTotal - Number of addresses (StoredValue) stored.
0x0C - dwTotal     - Number of modules
0x10 - mhcslPool   - List of modules

// The list of modules has for each module:
{
	+0x00 - m_dwLength  - Length of code string
	+0x04 - m_pcText    - The code string
}

// After the list of code strings:
+0x00 - m_ppsvList   - List of stored values

// The list of stored values has for each stored value:
{
	+0x00 - m_dwLength - Length of description (code string)
	+0x04 - m_pcText   - Description

	// After the description:

	+0x00 - ??? - Contains 0xFFFFFFFF, but doesn't seem to appear in the source code?
	+0x04 - iType - Data type.
	+0x08 - iArray - Length of the array if datatype is array, -1 otherwise.
	+0x0C - m_bShowUnicode - Save the unicode value
	+0x0D - m_bShowHex - Save the hex value
	+0x0E - m_iLockMode - Save the locking mode (0x00000000 for static unlocked)
	+0x12 - m_iLockParms - Save the locking parameters (see LOCKTYPE)
	+0x16 - m_dwLength - Length of lock value code string
	+0x1A - m_pcText - Lock value code string

	// After the lock value:
	+0x00 - bUseRelative - Is the relative address defined or not

	If it does use a relative address:
	+0x01 - iIndex - The index of the module in the list of code strings
	+0x05 - m_dwOffset - The actual offset

	// After the potential relative address
	+0x00 - m_dwHotKeyValue - Hotkey activation key

	0x04 - bUseComplex - Is the complex address defined or not
	0x05 - m_dwLength - Length of the complex address expression
	0x09 - m_pcText - Complex address expression

	// After the complex address expression
	+0x00 - ?? - Dword, contains 0x00000000
	+0x04 - ?? - Dword, contains 0x00000000
	+0x04 - ?? - Dword, contains 0x00000000
}

// Data types
enum MT_DATATYPES {
	MT_NONE = -1,
	MT_INT,
	MT_SHORT,
	MT_LONG,
	MT_USHORT,
	MT_ULONG,
	MT_FLOAT,
	MT_DOUBLE,
	MT_STRING,
	MT_BYTE,
	MT_CHAR,
	MT_POINTER,
	MT_INT64,
	MT_UINT64,
	MT_VOID,
	MT_BOOL,
	MT_NONSTANDARD,
	MT_CODE,
	MT_RESERVED,
	MT_ENUM,
	MT_STRUCT,
	MT_UNION,
	MT_TYPEDEF,
	MT_WCHAR,
	MT_FUNC,
};

// Locking parameters
union LOCKTYPE {
	struct {
		INT64 i64LockLow;		// In a range lock, the lowest value allowed.
		INT64 i64LockHigh;		// In a range lock, the highest value allowed.
	} irLock;
	struct {
		DOUBLE dLockLow;		// Low range for double values.
		DOUBLE dLockHigh;		// High range for double values.
	} drLock;
	INT64 i64Limit;		// In a min/max lock, this is the limit for either the minimum or maximum value.
	DOUBLE dLimit;		// Same as above.
};
